# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MWkCKDlIEqQnYgOioiN5PC9l3NtpO_1j

**Task 07: Querying RDF(s)**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2024-2025/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""

q1 = """
SELECT ?subclass
WHERE {
    ?subclass rdfs:subClassOf ns:LivingThing .
}
"""

for r in g.query(q1):
    print(r.subclass)

print()

ns = Namespace("http://somewhere#")
for s, p, o in g.triples((None, RDFS.subClassOf, ns.LivingThing)):
  print(s)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

q2 = """
SELECT ?individual
WHERE {
    ?individual rdf:type ?type .
    ?type rdfs:subClassOf* ns:Person .
}
"""

for r in g.query(q2):
    print(r.individual)

print()

ns = Namespace("http://somewhere#")
for s, p, o in g.triples((None, RDF.type, None)):
    if o == ns.Person or o == ns.Researcher or o == ns.Professor:
        print(s)

"""**TASK 7.3: List all individuals of just "Person" or "Animal". You do not need to list the individuals of the subclasses of person (in SPARQL only)**

"""

q3 = """
SELECT ?individual
WHERE {
    { ?individual rdf:type ns:Person }
    UNION
    { ?individual rdf:type ns:Animal }
}
"""

for r in g.query(q3):
    print(r.individual)

"""**TASK 7.4:  List the name of the persons who know Rocky (in SPARQL only)**"""

q4 = """
PREFIX vcard: <http://www.w3.org/2001/vcard-rdf/3.0/>
SELECT ?person ?name
WHERE {
    ?person rdf:type ?type .
    ?type rdfs:subClassOf* ns:Person .
    ?person foaf:knows ns:RockySmith .
    ?person vcard:FN ?name .
}
"""

for r in g.query(q4):
    print(r.name)

"""**Task 7.5: List the name of those animals who know at least another animal in the graph (in SPARQL only)**"""

q5 = """
PREFIX vcard: <http://www.w3.org/2001/vcard-rdf/3.0/>
SELECT ?animal ?givenName
WHERE {
    ?animal rdf:type ?type .
    ?type rdfs:subClassOf* ns:Animal .
    ?animal foaf:knows ?otherAnimal .
    ?otherAnimal rdf:type ?type .
    ?type rdfs:subClassOf* ns:Animal .
    ?animal vcard:Given ?givenName .
}
"""

for r in g.query(q5):
    print(r.givenName)

"""**Task 7.6: List the age of all living things in descending order (in SPARQL only)**"""

q6 = """
SELECT ?living ?age
WHERE {
    ?living rdf:type ?type .
    ?type rdfs:subClassOf* ns:LivingThing .
    ?living foaf:age ?age .
}
ORDER BY DESC(?age)
"""

for r in g.query(q6):
    print(r.age)