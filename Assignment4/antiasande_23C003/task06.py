# -*- coding: utf-8 -*-
"""Task06.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UsGJKRnz5shYIiAsblf_zIx2-4rNOZza

**Task 06: Modifying RDF(s)**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2024-2025/master/Assignment4/course_materials"

"""Read the RDF file as shown in class"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS, FOAF
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example5.rdf", format="xml")

"""Create a new class named Researcher"""

ns = Namespace("http://somewhere#")
g.add((ns.Researcher, RDF.type, RDFS.Class))
for s, p, o in g:
  print(s,p,o)

"""**TASK 6.1: Create a new class named "University"**

"""

ns = Namespace("http://somewhere#")
g.add((ns.University, RDF.type, RDFS.Class))
# Visualize the results
for s, p, o in g:
  print(s,p,o)

"""**TASK 6.2: Add "Researcher" as a subclass of "Person"**"""

g.add((ns.Person, RDF.type, RDFS.Class))
g.add((ns.Researcher, RDFS.subClassOf, ns.Person))
# Visualize the results
for s, p, o in g:
  print(s,p,o)

"""**TASK 6.3: Create a new individual of Researcher named "Jane Smithers"**"""

jane = ns.JaneSmithers
g.add((jane, RDF.type, ns.Researcher))
g.add((jane, FOAF.name, Literal("Jane Smithers")))
# Visualize the results
for s, p, o in g:
  print(s,p,o)

"""**TASK 6.4: Add to the individual JaneSmithers the email address, fullName, given and family names. Use the https://schema.org vocabulary**"""

schema = Namespace("https://schema.org/")
g.add((jane, schema.email, Literal("jane.smithers@example.com")))
g.add((jane, schema.name, Literal("Jane Smithers")))
g.add((jane, schema.givenName, Literal("Jane")))
g.add((jane, schema.familyName, Literal("Smithers")))
# Visualize the results
for s, p, o in g.triples((jane, None, None)):
    print(s, p, o)

"""**TASK 6.5: Add UPM as the university where John Smith works. Use the "https://example.org/ namespace**"""

john = ns.JohnSmith
g.add((john, RDF.type, ns.Researcher))
g.add((john, FOAF.name, Literal("John Smith")))
example = Namespace("https://example.org/")  # Namespace para UPM
upm = example.UPM  # Definir un URI para UPM
g.add((upm, RDF.type, ns.University))  # Definir que UPM es de tipo University
g.add((upm, RDFS.label, Literal("Universidad Politécnica de Madrid")))
g.add((john, schema.employer, upm))
# Visualize the results
for s, p, o in g.triples((john, None, None)):
    print(s, p, o)
for s, p, o in g.triples((upm, None, None)):
    print(s, p, o)

"""**Task 6.6: Add that Jown knows Jane using the FOAF vocabulary. Make sure the relationship exists.**"""

g.add((john, FOAF.knows, jane))
# Visualize the results
print("\nTodos los triples en el grafo:")
print("Nuevos triples añadidos para John Smith:")
for s, p, o in g.triples((john, None, None)):
    print(s, p, o)
for s, p, o in g:
    print(s, p, o)