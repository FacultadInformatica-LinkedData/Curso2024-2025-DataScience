# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GD1M0lxZcpNvMNiE5SB3jTsHmFPRASwf

**Task 07: Querying RDF(s)**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2024-2025/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""

ns = Namespace("http://somewhere#")
query = """
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT ?subclass
WHERE {
    ?subclass rdfs:subClassOf ns:LivingThing .
}
"""
results = g.query(query, initBindings={"ns": ns})
for row in results:
    print(row.subclass)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

ns = Namespace("http://somewhere#")
query = """
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT ?individual
WHERE {
    {
        ?individual a ns:Person .
    }
    UNION
    {
        ?subclass rdfs:subClassOf ns:Person .
        ?individual a ?subclass .
    }
}
"""
results = g.query(query, initBindings={"ns": ns})
for row in results:
    print(row.individual)

"""**TASK 7.3: List all individuals of just "Person" or "Animal". You do not need to list the individuals of the subclasses of person (in SPARQL only)**

"""

ns = Namespace("http://somewhere#")
query = """
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT ?individual
WHERE {
    { ?individual a ns:Person . }
    UNION
    { ?individual a ns:Animal . }
}
"""
results = g.query(query, initBindings={"ns": ns})
for row in results:
    print(row.individual)

"""**TASK 7.4:  List the name of the persons who know Rocky (in SPARQL only)**"""

ns = Namespace("http://somewhere#")
query = """
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX ns: <http://somewhere#>

SELECT ?name
WHERE {
    ?person foaf:knows ns:Rocky .  # Asume que Rocky está en el namespace definido
    ?person foaf:name ?name .       # Obtener el nombre de la persona
}
"""
results = g.query(query, initBindings={"ns": ns})

for row in results:
    print(row.name)

"""**Task 7.5: List the name of those animals who know at least another animal in the graph (in SPARQL only)**"""

ns = Namespace("http://somewhere#")
query = """
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX ns: <http://somewhere#>

SELECT ?animalName
WHERE {
    ?animal a ns:Animal .              # Filtrar individuos de la clase Animal
    ?animal foaf:knows ?otherAnimal .   # Verificar que conocen a otro animal
    ?otherAnimal a ns:Animal .          # Asegurarse de que el otro individuo también es un Animal
    ?animal foaf:name ?animalName .     # Obtener el nombre del animal
}
"""
results = g.query(query, initBindings={"ns": ns})
for row in results:
    print(row.animalName)

"""**Task 7.6: List the age of all living things in descending order (in SPARQL only)**"""

ns = Namespace("http://somewhere#")
query = """
PREFIX ns: <http://somewhere#>
PREFIX schema: <https://schema.org/>

SELECT ?livingThing ?age
WHERE {
    ?livingThing a ns:LivingThing .     # Filtrar individuos de la clase LivingThing
    ?livingThing schema:age ?age .       # Obtener la edad del LivingThing
}
ORDER BY DESC(?age)                    # Ordenar por edad en orden descendente
"""
results = g.query(query, initBindings={"ns": ns})
for row in results:
    print(f"{row.livingThing} : {row.age}")