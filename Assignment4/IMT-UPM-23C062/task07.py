# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aHi0gE8qk8oEkRLSHpNL3Ca-toqDJCBq

**Task 07: Querying RDF(s)**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2024-2025/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""

from rdflib.plugins.sparql import prepareQuery
ns = Namespace("http://somewhere#")

q1 = prepareQuery('''
  SELECT ?Subject WHERE {
    ?Subject rdfs:subClassOf ns:LivingThing
  }
  ''',
  initNs = { "ns": ns , "rdfs": RDFS }
)

print('**============== SPARQL ')
for r in g.query(q1):
  print(r.Subject)

ns = Namespace("http://somewhere#")
print('**============== RDFLib ')
for s, p, o in g.triples((None, RDFS.subClassOf, ns.LivingThing)):
  print(s)

# Otra forma
q1 = f"""SELECT ?subclass
        WHERE {{ ?subclass rdfs:subClassOf ns:LivingThing }} """

print('**============== SPARQL ')
for r in g.query(q1):
  print(r.subclass)

ns = Namespace("http://somewhere#")
print('**============== RDFLib ')
for s, p, o in g.triples((None, RDFS.subClassOf, ns.LivingThing)):
  print(s)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

from rdflib.plugins.sparql import prepareQuery
ns = Namespace("http://somewhere#")

q2 = prepareQuery('''
  SELECT ?Subject WHERE {
    ?Subject rdf:type ns:Person
  }
  ''',
  initNs = {"ns": ns , "rdf": RDF }
)

print('**============== SPARQL ')
for r in g.query(q2):
  print(r.Subject)

ns = Namespace("http://somewhere#")
print('**============== RDFLib ')
for s, p, o in g.triples((None, RDF.type, ns.Person)):
  print(s)

q2 = f"""SELECT ?individuals
        WHERE {{ ?individuals a ns:Person . }}"""

for r in g.query(q2):
  print(r.individuals)

"""**TASK 7.3: List all individuals of just "Person" or "Animal". You do not need to list the individuals of the subclasses of person (in SPARQL only)**

"""

from rdflib.plugins.sparql import prepareQuery
ns = Namespace("http://somewhere#")

q3 = prepareQuery('''
  SELECT ?Subject WHERE {
    {?Subject rdf:type ns:Person}
    UNION
    {?Subject rdf:type ns:Animal}
  }
  ''',
  initNs = {"ns": ns , "rdf": RDF }
)


for r in g.query(q3):
  print(r.Subject)

# TASK 7.3: List all individuals of "Person" or "Animal" and all their properties
# including their class with RDFLib and SPARQL. You do not need to list the
# individuals of the subclasses of person**
q3 = f"""SELECT ?individual ?property ?value ?class
        WHERE {{
          {{
            ?individual a ns:Person .
            ?individual ?property ?value .
            BIND("Person" AS ?class)
          }}
          UNION
          {{
            ?individual a ns:Animal .
            ?individual ?property ?value .
            BIND("Animal" AS ?class)
          }}
        }}"""
n = 0
for r in g.query(q3):
    n = n + 1
    print(r)
print(n)

"""**TASK 7.4:  List the name of the persons who know Rocky (in SPARQL only)**"""

from rdflib.plugins.sparql import prepareQuery
ns = Namespace("http://somewhere#")

q4 = prepareQuery('''
  SELECT ?Subject WHERE {
    {?Subject rdf:type ns:Person}
    UNION
    {?Subject ns:knows ns:Rocky}
  }
  ''',
  initNs = {"ns": ns , "rdf": RDF }
)


for r in g.query(q4):
  print(r.Subject)

"""**Task 7.5: List the name of those animals who know at least another animal in the graph (in SPARQL only)**"""

from rdflib.plugins.sparql import prepareQuery
from rdflib.namespace import FOAF
ns = Namespace("http://somewhere#")
vcard=Namespace("http://www.w3.org/2001/vcard-rdf/3.0/")

q5 = prepareQuery('''
  SELECT ?Nombre ?Nombre WHERE {
    ?Subject rdf:type ns:Animal.
    ?Subject foaf:knows ?Alguien.
    ?Alguien rdf:type ns:Animal.
    ?Subject vcard:FN ?Nombre


  }
  ''',
  initNs = {"ns": ns , "rdf": RDF , "vcard": vcard}
)


for r in g.query(q5):
  print(r.Nombre)

"""**Task 7.6: List the age of all living things in descending order (in SPARQL only)**"""

from rdflib.plugins.sparql import prepareQuery
from rdflib.namespace import FOAF
ns = Namespace("http://somewhere#")
vcard=Namespace("http://www.w3.org/2001/vcard-rdf/3.0/")

# ASC | DESC ]

q6 = prepareQuery('''
  SELECT ?Subject ?Edad WHERE {
    ?Subject rdf:type ?Tipo.
    ?Tipo rdfs:subClassOf ns:LivingThing.
    ?Subject foaf:age ?Edad

  } ORDER BY DESC(?Edad)
  ''',
  initNs = {"ns": ns , "rdf": RDF , "rdfs": RDFS , "vcard": vcard , "foaf": FOAF}
)


for r in g.query(q6):
  print('**-- Sujeto: ', r.Subject, ' edad: ',r.Edad )

from rdflib.plugins.sparql import prepareQuery
ns = Namespace("http://somewhere#")
res = Namespace("http://dbpedia.org/resource#")
dbpedia2 = Namespace(" <http://dbpedia.org/ontology#")


q7= prepareQuery('''
  SELECT ?Subject WHERE {
    ?Subject rdf:type res:Politicia
  }
  ''',
  initNs = {"ns": ns , "rdf": RDF , "res": res, "dbpedia2":dbpedia2}
)

for r in g.query(q7):
  print(r.Subject)