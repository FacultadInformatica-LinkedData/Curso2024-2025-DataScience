# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16nfHCx9VYqxkTvd12TpBguDSyfB6H9qq

**Task 07: Querying RDF(s)**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2024-2025/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""

# TO DO
ns = Namespace("http://somewhere#")

from rdflib.plugins.sparql import prepareQuery

q1 = prepareQuery("""
  SELECT ?subclass
  WHERE {
    ?subclass rdfs:subClassOf ns:LivingThing
}
""",
                  initNs = {"rdfs": RDFS, "ns": ns})


# Visualize the results

print("SPARQL:")
for r in g.query(q1):
  print(r)



print("\nRDFLib:")
for s, p, o in g.triples((None, RDFS.subClassOf, ns.LivingThing)):
  print(s)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

# TO DO
q2 = prepareQuery("""
  SELECT ?person
  WHERE {
    {
      ?person rdf:type ns:Person
    }
    UNION
    {
      ?subclass rdfs:subClassOf ns:Person .
      ?person rdf:type ?subclass
    }
  }
""",
      initNs = {"rdf": RDF, "ns": ns, "rdfs": RDFS})
# Visualize the results
print("SPARQL:")
for r in g.query(q2):
  print(r)



print("\nRDFLib:")
for s, p, o in g.triples((None, RDF.type, ns.Person)):
  print(s)

for Subclass, _, _ in g.triples((None, RDFS.subClassOf, ns.Person)):
  for s, p, o in g.triples((None, RDF.type, Subclass)):
    print(s)

"""**TASK 7.3: List all individuals of just "Person" or "Animal". You do not need to list the individuals of the subclasses of person (in SPARQL only)**

"""

# TO DO
q3 = prepareQuery("""
  SELECT ?individual
  WHERE {
    {
      ?individual rdf:type ns:Person .
    }
    UNION
    {
      ?individual rdf:type ns:Animal
    }
  }
""",
                  initNs={"rdf": RDF, "ns": ns, "rdfs": RDFS})
# Visualize the results
for r in g.query(q3):
  print(r)

"""**TASK 7.4:  List the name of the persons who know Rocky (in SPARQL only)**"""

# TO DO
foaf = Namespace("http://xmlns.com/foaf/0.1/")

q4 = prepareQuery("""
  SELECT ?person
  WHERE {
    ?person foaf:knows ns:RockySmith
  }
""",
                  initNs={"foaf": foaf, "ns": ns})
# Visualize the results
for r in g.query(q4):
  print(r)

"""**Task 7.5: List the name of those animals who know at least another animal in the graph (in SPARQL only)**"""

# TO DO
vcard = Namespace("http://www.w3.org/2001/vcard-rdf/3.0/")

q5 = prepareQuery("""
  SELECT ?animalName
  WHERE {
    ?animal rdf:type ns:Animal .
    ?animal foaf:knows ?otherAnimal .
    ?otherAnimal rdf:type ns:Animal .
    ?animal vcard:Given ?animalName
  }
""",
                  initNs={"foaf": foaf, "ns": ns, "rdf": RDF, "vcard": vcard})
# Visualize the results
for r in g.query(q5):
  print(r)

"""**Task 7.6: List the age of all living things in descending order (in SPARQL only)**"""

# TO DO
q6 = prepareQuery("""
  SELECT ?livingThing ?age
  WHERE {
    {
      ?livingThing rdf:type ns:Person .
      ?livingThing foaf:age ?age .
    }
    UNION
    {
      ?livingThing rdf:type ns:Animal .
      ?livingThing foaf:age ?age .
    }
  } ORDER BY DESC(?age)
""",
                  initNs = {"rdf": RDF, "foaf": foaf, "ns": ns})
# Visualize the results
for r in g.query(q6):
  print(r)