# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12vYA4HsrDe7pbfdfnb5HZp6fNAmVd3T-

**Task 07: Querying RDF(s)**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2024-2025/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

for s,p,o in g.triples((None, None, None)):
  print(s,p,o)

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""

from rdflib.plugins.sparql import prepareQuery

ns = Namespace("http://somewhere#")

for s,p,o in g.triples((None, RDFS.subClassOf, ns.LivingThing)):
  print(s,p,o)
q1 = prepareQuery('''
  SELECT ?Subclass WHERE {
    ?Subclass rdfs:subClassOf ns:LivingThing.
    }
    ''',
                  initNs = {"ns": ns}
    )

for r in g.query(q1):
  print(r)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

from rdflib import FOAF

for s,p,o in g.triples((None, RDF.type, ns.Person)):
  print(s,p,o)

q2 = prepareQuery('''
  SELECT ?Individual WHERE{
    ?Individual rdf:type ns:Person.
  }
  ''',
                  initNs = {"ns": ns}

  )
for r in g.query(q2):
  print(r)

"""**TASK 7.3: List all individuals of just "Person" or "Animal". You do not need to list the individuals of the subclasses of person (in SPARQL only)**

"""

q3 = prepareQuery('''
  SELECT ?Individual WHERE{
    {?Individual rdf:type ns:Person.}
     UNION
     {?Individual rdf:type ns:Animal.
     }
     }
     ''', initNs = {"ns": ns}
                  )
# Visualize the results
for r in g.query(q3):
  print(r)

"""**TASK 7.4:  List the name of the persons who know Rocky (in SPARQL only)**"""

q4 = prepareQuery('''
  SELECT ?Persona WHERE{
    {?Persona rdf:type ns:Person.}
     {?Persona foaf:knows ns:RockySmith.
     }

  }
  ''',
                  initNs = {"ns": ns, "foaf": FOAF })
# Visualize the results
for r in g.query(q4):
  print(r)

"""**Task 7.5: List the name of those animals who know at least another animal in the graph (in SPARQL only)**"""

q5 = prepareQuery('''
  SELECT ?Animal WHERE{
    {?Animal rdf:type ns:Animal}
    {?Animal foaf:knows ?otroAnimal}
  }
  ''',
                  initNs = {"ns": ns, "foaf": FOAF})
# Visualize the results
for r in g.query(q5):
  print(r)

"""**Task 7.6: List the age of all living things in descending order (in SPARQL only)**"""

q6 = prepareQuery('''
  SELECT ?LivingThing ?Edad WHERE{
    {?LivingThing foaf:age ?Edad}
  } ORDER BY DESC(?Edad)
  ''',
                  initNs = {"foaf": FOAF})

for r in g.query(q6):
  print(r.LivingThing, r.Edad)