# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1J1pmydot9XNvsQkaN5u5Pxw2EEv6Bti4

**Task 07: Querying RDF(s)**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2024-2025/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""

# TO DO
from rdflib.plugins.sparql import prepareQuery
ns = Namespace("http://somewhere#")
rdfs = Namespace("http://www.w3.org/2000/01/rdf-schema#")
q1 = prepareQuery('''
  SELECT ?subclass WHERE {
    ?subclass rdfs:subClassOf* ns:LivingThing .
    }''',
  initNs = {"ns": ns, "rdfs": rdfs})

# Visualize the results
for r in g.query(q1):
  print(r.subclass)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

# TO DO
rdf = Namespace("http://www.w3.org/1999/02/22-rdf-syntax-ns#")
#seria lo mismo poner from rdflib.namespace import RDF as rdf
q2 = prepareQuery('''
  SELECT ?individual WHERE {
    ?class rdfs:subClassOf* ns:Person .
    ?individual rdf:type ?class .
    }''',
  initNs={"ns": ns, "rdf": rdf, "rdfs": rdfs})

# Visualize the results
for r in g.query(q2):
  print(r.individual)

"""**TASK 7.3: List all individuals of just "Person" or "Animal". You do not need to list the individuals of the subclasses of person (in SPARQL only)**

"""

# TO DO
q3 = prepareQuery('''
  SELECT ?individual WHERE {
    ?individual rdf:type ?type .
    FILTER (?type IN (ns:Person, ns:Animal))
  }
  ''',
  initNs = {"ns": ns})
# Visualize the results
for r in g.query(q3):
  print(r.individual)

"""**TASK 7.4:  List the name of the persons who know Rocky (in SPARQL only)**"""

# TO DO
VCARD = Namespace("http://www.w3.org/2001/vcard-rdf/3.0#")
from rdflib.namespace import FOAF

q4 = prepareQuery('''
  SELECT ?person WHERE {
    ?person rdf:type ns:Person .
    ?person FOAF:knows ns:RockySmith .
  }''',
  initNs = {"ns": ns, "rdf": rdf, "FOAF": FOAF})

#El apellido Smith lo he sacado de la base de datos
# Visualize the results
for r in g.query(q4):
  print(r.person)



"""**Task 7.5: List the name of those animals who know at least another animal in the graph (in SPARQL only)**"""

# TO DO
q5 = prepareQuery('''
  SELECT DISTINCT ?animal WHERE {
    ?animal rdf:type ns:Animal .
    ?otherAnimal rdf:type ns:Animal .
    ?animal foaf:knows ?otherAnimal .

  }''',
  initNs={"ns": ns, "rdf": RDF, "foaf":FOAF})
# Visualize the results
for r in g.query(q5):
  print(r.animal)

"""**Task 7.6: List the age of all living things in descending order (in SPARQL only)**"""

# TO DO
q6 = prepareQuery('''
  SELECT ?livingThing ?age WHERE {
    ?livingThing rdf:type ?class .
    ?class rdfs:subClassOf* ns:LivingThing .
    ?livingThing foaf:age ?age
  }
  ORDER BY DESC(?age)''',
  initNs={"ns": ns, "rdf": rdf, "rdfs": RDFS, "foaf":FOAF})

# Visualize the results
for r in g.query(q6):
  print(r.age)