# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19MIAriu3GSA2CE8X7ASbOykVPIgu6GgW

**Task 07: Querying RDF(s)**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2024-2025/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL

"""

from rdflib.plugins.sparql import prepareQuery
ns = Namespace("http://somewhere#")
rdfs = Namespace("http://www.w3.org/2000/01/rdf-schema#")
q1 = prepareQuery('''
  SELECT ?subclass WHERE {
    ?subclass rdfs:subClassOf* ns:LivingThing .
  }''',
  initNs = {"ns": ns, "rdfs": rdfs})
for r in g.query(q1):
  print(r.subclass)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

from rdflib.namespace import RDF as rdf
q2 =  prepareQuery('''
  SELECT ?individual WHERE {
    ?class rdfs:subClassOf* ns:Person .
    ?individual rdf:type ?class .
  }''',
  initNs = {"ns": ns, "rdf": rdf, "rdfs": rdfs})
for r in g.query(q2):
  print(r.individual)

"""**TASK 7.3: List all individuals of just "Person" or "Animal". You do not need to list the individuals of the subclasses of person (in SPARQL only)**

"""

q3 = prepareQuery('''
  SELECT ?individual WHERE {
    ?individual rdf:type ?class .
    FILTER (?class = ns:Person || ?class = ns:Animal)
  }''',
  initNs = {"ns": ns, "rdf": rdf})
for r in g.query(q3):
  print(r.individual)

"""**TASK 7.4:  List the name of the persons who know Rocky (in SPARQL only)**"""

from rdflib.namespace import FOAF
q4 = prepareQuery('''
    SELECT ?person WHERE {
      ?person foaf:knows ns:RockySmith .
      ?person rdf:type ns:Person .
    }''',
    initNs={"rdf": rdf, "foaf": FOAF, "ns": ns})
for r in g.query(q4): #, initBindings={"?rocky": ns.RockySmith, "?personClass": ns.Person}
    print(r.person)

"""**Task 7.5: List the name of those animals who know at least another animal in the graph (in SPARQL only)**"""

q5 = prepareQuery('''
    SELECT ?animal WHERE {
      ?animal foaf:knows ?Animal2 .
      ?animal rdf:type ns:Animal .
      ?Animal2 rdf:type ns:Animal .
    }''',
    initNs={"rdf": rdf, "foaf": FOAF, "ns": ns})

for r in g.query(q5):
    print(r.animal)

"""**Task 7.6: List the age of all living things in descending order (in SPARQL only)**"""

q6 = prepareQuery('''
  SELECT ?livingThing ?age WHERE {
    ?class rdfs:subClassOf* ns:LivingThing .
    ?livingThing rdf:type ?class .
    ?livingThing foaf:age ?age .
  }
  ORDER BY DESC(?age)
  ''',
  initNs = {"rdf": rdf, "foaf": FOAF, "rdfs": rdfs, "ns": ns})
for r in g.query(q6):
  print(r.livingThing, r.age)