# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zMs3tzeM_VxmSmNbNxpKR9W7gEBO6oR5

**Task 07: Querying RDF(s)**
"""

# !pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2024-2025/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""

# TO DO
ns = Namespace("http://somewhere#")
# Using RDFLib
print("Using RDFLib")
for s, p, o in g.triples((None, RDFS.subClassOf, ns.LivingThing)):
  print(s)

# Using SPARQL
print("\nUsing SPARQL")
from rdflib.plugins.sparql import prepareQuery
q1 = prepareQuery('''
  SELECT ?subclass WHERE {
    ?subclass rdfs:subClassOf ns:LivingThing .
  }
''',
    initNs = {"rdfs": RDFS, "ns": ns})

# Visualize the results
for r in g.query(q1):
  print(r.subclass)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

# TO DO
# Using RDFLib
print("\nUsing RDFLib")
for s, p, o in g.triples((None, RDF.type, ns.Person)):
  print(s)
for s, p, o in g.triples((None, RDFS.subClassOf, ns.Person)):
  for s2, p2, o2 in g.triples((None, RDF.type, s)):
    print(s2)

# Using SPARQL
print("\nUsing SPARQL")
q2 = prepareQuery('''
  SELECT ?person WHERE {
    {?person rdf:type ns:Person .}
    UNION
    {
      ?person rdf:type ?subclass .
      ?subclass rdfs:subClassOf ns:Person
    }
  }
''',
    initNs = {"rdfs": RDFS, "ns": ns})

# Visualize the results
for r in g.query(q2):
  print(r.person)

"""**TASK 7.3: List all individuals of just "Person" or "Animal". You do not need to list the individuals of the subclasses of person (in SPARQL only)**

"""

# TO DO
q3 = prepareQuery('''
  SELECT ?individual WHERE {
    {?individual rdf:type ns:Person .}
    UNION
    {?individual rdf:type ns:Animal .}
  }
''',
    initNs = {"rdf": RDF, "ns": ns})
# Visualize the results
print("\n")
for r in g.query(q3):
  print(r.individual)

"""**TASK 7.4:  List the name of the persons who know Rocky (in SPARQL only)**"""

# TO DO
from rdflib.namespace import FOAF
vcard = Namespace("http://www.w3.org/2001/vcard-rdf/3.0/")

q4 = prepareQuery('''
  SELECT ?name WHERE {
    {?person rdf:type ns:Person .}
    UNION
    {
      ?person rdf:type ?subclass .
      ?subclass rdfs:subClassOf ns:Person
    }
    ?person foaf:knows ns:RockySmith .
    ?person vcard:Given ?name .
  }
''',
    initNs = {"rdf": RDF, "foaf": FOAF, "vcard": vcard, "ns": ns})
# Visualize the results
print("\n")
for r in g.query(q4):
  print(r.name)

"""**Task 7.5: List the name of those animals who know at least another animal in the graph (in SPARQL only)**"""

# TO DO
q5 = prepareQuery('''
  SELECT ?name WHERE {
    ?animal rdf:type ns:Animal .
    ?animal2 rdf:type ns:Animal .
    ?animal foaf:knows ?animal2 .
    ?animal vcard:Given ?name
  }
''',
    initNs = {"rdf": RDF, "foaf": FOAF, "ns": ns, "vcard": vcard})
# Visualize the results
print("\n")
for r in g.query(q5):
  print(r.name)

"""**Task 7.6: List the age of all living things in descending order (in SPARQL only)**"""

# TO DO
q6 = prepareQuery('''
  SELECT ?age WHERE {
    ?individual rdf:type ?subclass .
    ?subclass rdfs:subClassOf ns:LivingThing .
    ?individual foaf:age ?age .
  }
  ORDER BY DESC(?age)
''',
  initNs = {"rdf": RDF, "foaf": FOAF, "ns": ns})
# Visualize the results
print("\n")
for r in g.query(q6):
  print(r.age)