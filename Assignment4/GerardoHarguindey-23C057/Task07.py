# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gA-OoyNLGjsKey2aCeGb9GqfKVuqULMm

**Task 07: Querying RDF(s)**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2024-2025/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""

LivingThing = g.subjects(RDFS.subClassOf, Namespace("http://somewhere#")["LivingThing"])
# Visualize the results
for subclass in LivingThing:
    print(subclass)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

Person = g.triples((None, RDF.type, Namespace("http://somewhere#")["Person"]))
# Visualize the results
for s, p, o in Person:
    print(s)
for subclass in g.subjects(RDFS.subClassOf, Namespace("http://somewhere#")["Person"]):
    for s, p, o in g.triples((None, RDF.type, subclass)):
        print(s)

"""**TASK 7.3: List all individuals of just "Person" or "Animal". You do not need to list the individuals of the subclasses of person (in SPARQL only)**

"""

q3 = '''
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
SELECT ?individual
WHERE {
    ?individual rdf:type ?type .
    FILTER (?type IN (<http://somewhere#Person>, <http://somewhere#Animal>))
}
'''
# Visualize the results
for r in g.query(q3):
    print(r.individual)

"""**TASK 7.4:  List the name of the persons who know Rocky (in SPARQL only)**"""

q4 = '''
PREFIX vcard: <http://www.w3.org/2001/vcard-rdf/3.0#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
SELECT ?name
WHERE {
    ?person vcard:FN ?name .
    ?person <http://somewhere#knows> <http://somewhere#Rocky> .
}
'''
# Visualize the results
for r in g.query(q4):
    print(r.name)

"""**Task 7.5: List the name of those animals who know at least another animal in the graph (in SPARQL only)**"""

q5 = '''
PREFIX vcard: <http://www.w3.org/2001/vcard-rdf/3.0#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
SELECT ?name
WHERE {
    ?animal rdf:type <http://somewhere#Animal> .
    ?animal vcard:FN ?name .
    ?animal <http://somewhere#knows> ?otherAnimal .
    ?otherAnimal rdf:type <http://somewhere#Animal> .
}
'''
# Visualize the results
for r in g.query(q5):
    print(r.name)

"""**Task 7.6: List the age of all living things in descending order (in SPARQL only)**"""

q6 = '''
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
SELECT ?age
WHERE {
    ?livingThing rdf:type <http://somewhere#LivingThing> .
    ?livingThing <http://somewhere#age> ?age .
}
ORDER BY DESC(?age)
'''
# Visualize the results
for r in g.query(q6):
    print(r.age)