# -*- coding: utf-8 -*-
"""Task07.ipynb
Automatically generated by Colab.
Original file is located at
    https://colab.research.google.com/drive/1cEIc7u_xTP2DqwbC5BeHeKWeEu08lpeo
**Task 07: Querying RDF(s)**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2024-2025/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""

ns = Namespace("http://somewhere#")
from rdflib.plugins.sparql import prepareQuery
q1 = prepareQuery('''
  SELECT ?x WHERE {
    ?x rdfs:subClassOf* ns:LivingThing .
  }
''',
    initNs={'rdfs':RDFS, "ns":ns}


)
for r in g.query(q1):
  print(r)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**
"""

q2 = prepareQuery('''
  SELECT ?x WHERE {
    ?x rdf:type ?class .
    ?class rdfs:subClassOf* ns:Person
  }
''',
    initNs={'rdfs':RDFS,'ns':ns}


)

for r in g.query(q2):
  print(r)

#solucion recursiva pra hallar todas las subclases de Person
def subclasses_rec(clase):
  res = [clase]
  for s,p,o in g.triples((None, RDFS.subClassOf,clase )):
    res+=subclasses_rec(s)
  return res
for clase in subclasses_rec(ns.Person):
  for s,p,o in g.triples((None, RDF.type,clase)):
    print(s)

"""**TASK 7.3: List all individuals of just "Person" or "Animal". You do not need to list the individuals of the subclasses of person (in SPARQL only)**
"""

q3 = prepareQuery('''
  SELECT ?x WHERE {
    {?x rdf:type ns:Person} UNION
    {?x rdf:type ns:Animal}
  }
''',
    initNs={'rdfs':RDFS, "ns":ns}


)
for r in g.query(q3):
  print(r)

"""**TASK 7.4:  List the name of the persons who know Rocky (in SPARQL only)**"""

from rdflib.namespace import FOAF
q4 = prepareQuery('''
  SELECT ?x WHERE {
    ?x a ?class .
    ?class rdfs:subClassOf* ns:Person .
    ?x foaf:knows ns:RockySmith .
  }
''',
    initNs={'rdfs':RDFS, "ns":ns, 'foaf':FOAF}
)
for r in g.query(q4):
    print(r)

"""**Task 7.5: List the name of those animals who know at least another animal in the graph (in SPARQL only)**"""

vcard=Namespace("http://www.w3.org/2001/vcard-rdf/3.0/")
q5 = prepareQuery('''
  SELECT ?Given WHERE {
    ?x a ns:Animal .
    ?x foaf:knows ?y .
    ?y a ns:Animal .
    ?x vcard:Given ?Given
  }
''',
    initNs={'rdfs':RDFS, "ns":ns, 'foaf': FOAF,'vcard':vcard}
)
for r in g.query(q5):
    print(r)

"""**Task 7.6: List the age of all living things in descending order (in SPARQL only)**"""

q6 = prepareQuery('''
  SELECT ?age WHERE {
    ?x a ?class .
    ?class rdfs:subClassOf* ns:LivingThing .
    ?x foaf:age ?age
  }
  ORDER BY DESC(?age)
''',
    initNs={'rdfs':RDFS, "ns":ns, 'foaf': FOAF}
)
for r in g.query(q6):
    print(r)