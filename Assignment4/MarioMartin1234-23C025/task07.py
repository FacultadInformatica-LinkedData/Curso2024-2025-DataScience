# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PrWKQ_zMTp8QWJ4z_6HKVBM33TjYdQ_W

**Task 07: Querying RDF(s)**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2024-2025/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""

# TO DO
# Visualize the results

g.add((Namespace("http://somewhere#").LivingThing, RDF.type, RDFS.Class))
g.add((Namespace("http://somewhere#").Animal, RDF.type, RDFS.Class))
g.add((Namespace("http://somewhere#").Plant, RDF.type, RDFS.Class))
g.add((Namespace("http://somewhere#").Animal, RDFS.subClassOf, Namespace("http://somewhere#").LivingThing))
g.add((Namespace("http://somewhere#").Plant, RDFS.subClassOf, Namespace("http://somewhere#").LivingThing))

from rdflib.plugins.sparql import prepareQuery

query = """
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX ns: <http://somewhere#>

SELECT ?subclass
WHERE {
    ?subclass rdfs:subClassOf ns:LivingThing .
}
"""
print("Subclases de LivingThing:")
for r in g.query(query):
    print(r)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)

g.add((Namespace("http://somewhere#").Person, RDF.type, RDFS.Class))
g.add((Namespace("http://somewhere#").Researcher, RDF.type, RDFS.Class))

g.add((Namespace("http://somewhere#").Researcher, RDFS.subClassOf, Namespace("http://somewhere#").Person))

g.add((Namespace("http://somewhere#").JaneSmithers, RDF.type, Namespace("http://somewhere#").Researcher))
g.add((Namespace("http://somewhere#").JohnSmith, RDF.type, Namespace("http://somewhere#").Person))

from rdflib.plugins.sparql import prepareQuery

query = """
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX ns: <http://somewhere#>

SELECT ?person
WHERE {
    ?person rdf:type ns:Person .
    OPTIONAL { ?person rdf:type ?type . }
    ?type rdfs:subClassOf* ns:Person .
}
"""

print("Individuos de la clase Person:")
for r in g.query(query):
    print(r.person)

"""**TASK 7.3: List all individuals of just "Person" or "Animal". You do not need to list the individuals of the subclasses of person (in SPARQL only)**

"""

# TO DO
# Visualize the results

g.add((Namespace("http://somewhere#").Person, RDF.type, RDFS.Class))
g.add((Namespace("http://somewhere#").Animal, RDF.type, RDFS.Class))

g.add((Namespace("http://somewhere#").Researcher, RDF.type, RDFS.Class))
g.add((Namespace("http://somewhere#").Researcher, RDFS.subClassOf, Namespace("http://somewhere#").Person))

g.add((Namespace("http://somewhere#").JaneSmithers, RDF.type, Namespace("http://somewhere#").Researcher))
g.add((Namespace("http://somewhere#").JohnSmith, RDF.type, Namespace("http://somewhere#").Person))

g.add((Namespace("http://somewhere#").Dog, RDF.type, Namespace("http://somewhere#").Animal))
g.add((Namespace("http://somewhere#").Cat, RDF.type, Namespace("http://somewhere#").Animal))

from rdflib.plugins.sparql import prepareQuery
query = """
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX ns: <http://somewhere#>

SELECT ?individual
WHERE {
    {
        ?individual rdf:type ns:Person .
        FILTER NOT EXISTS { ?individual rdf:type ?subclass . ?subclass rdfs:subClassOf ns:Person }
    } UNION {
        ?individual rdf:type ns:Animal .
    }
}
"""
print("Individuos de la clase Person o Animal (sin subclases de Person):")
for r in g.query(query):
    print(r.individual)

"""**TASK 7.4:  List the name of the persons who know Rocky (in SPARQL only)**"""

# TO DO
# Visualize the results


query = """
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX ns: <http://somewhere#>

SELECT ?personName
WHERE {
    ?person foaf:knows ns:Rocky .
    ?person foaf:name ?personName .
}
"""

# Ejecutar la consulta y visualizar los resultados
print("Nombres de las personas que conocen a Rocky:")
for r in g.query(query):
    print(r.personName)

"""**Task 7.5: List the name of those animals who know at least another animal in the graph (in SPARQL only)**"""

# TO DO
# Visualize the results

query = """
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX ns: <http://somewhere#>

SELECT DISTINCT ?animalName
WHERE {
    ?animal rdf:type ns:Animal .
    ?animal foaf:knows ?otherAnimal .
    ?otherAnimal rdf:type ns:Animal .
    ?animal foaf:name ?animalName .
}
"""

print("Nombres de los animales que conocen al menos a otro animal:")
for r in g.query(query):
    print(r.animalName)

"""**Task 7.6: List the age of all living things in descending order (in SPARQL only)**"""

# TO DO
# Visualize the results