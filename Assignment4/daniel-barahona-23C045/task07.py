# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XA7v9plEwKxHqMdmnyl9bwe7agDgkDr1

**Task 07: Querying RDF(s)**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2024-2025/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""

q1 = """
SELECT ?subclass
WHERE {
    ?subclass rdfs:subClassOf <http://somewhere#LivingThing> .
}
"""

results = g.query(q1)

for r in results:
    print(r.subclass)
ns = Namespace("http://somewhere#")
living_thing_uri = ns.LivingThing

subclasses = []
for s, p, o in g.triples((None, RDFS.subClassOf, living_thing_uri)):
    subclasses.append(s)

print("Subclasses of LivingThing:")
for subclass in subclasses:
    print(subclass)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

query = """
SELECT ?individual
WHERE {
    {
        ?individual rdf:type <http://somewhere#Person> .
    }
    UNION
    {
        ?individual rdf:type ?subclass .
        ?subclass rdfs:subClassOf <http://somewhere#Person> .
    }
}
"""
results = g.query(query)

for r in results:
    print(r.individual)
ns = Namespace("http://somewhere#")
person_class = ns.Person

individuals = set()
for s, p, o in g.triples((None, RDF.type, person_class)):
    individuals.add(s)
subclasses = set()
for s, p, o in g.triples((None, RDFS.subClassOf, person_class)):
    subclasses.add(s)

for subclass in subclasses:
    for s, p, o in g.triples((None, RDF.type, subclass)):
        individuals.add(s)

print("Individuals of Person:")
for individual in individuals:
    print(individual)

"""**TASK 7.3: List all individuals of just "Person" or "Animal". You do not need to list the individuals of the subclasses of person (in SPARQL only)**

"""

query = """
SELECT ?individual
WHERE {
    {
        ?individual rdf:type <http://somewhere#Person> .
    }
    UNION
    {
        ?individual rdf:type <http://somewhere#Animal> .
    }
}
"""
results = g.query(query)

for r in results:
    print(r.individual)

"""**TASK 7.4:  List the name of the persons who know Rocky (in SPARQL only)**"""

query = """
PREFIX vcard: <http://www.w3.org/2001/vcard-rdf/3.0/>

SELECT ?personName
WHERE {
    ?person rdf:type <http://somewhere#Person> .
    ?person <http://xmlns.com/foaf/0.1/knows> <http://somewhere#RockySmith> .
    ?person vcard:FN ?personName .
}
"""
results = g.query(query)

for r in results:
    print(r.personName)

"""**Task 7.5: List the name of those animals who know at least another animal in the graph (in SPARQL only)**"""

query = """
PREFIX vcard: <http://www.w3.org/2001/vcard-rdf/3.0/>

SELECT DISTINCT ?animalName
WHERE {
    ?animal rdf:type <http://somewhere#Animal> .
    ?animal <http://xmlns.com/foaf/0.1/knows> ?otherAnimal .
    ?otherAnimal rdf:type <http://somewhere#Animal> .
    ?animal vcard:FN ?animalName .
}
"""


results = g.query(query)

for r in results:
    print(r.animalName)

"""**Task 7.6: List the age of all living things in descending order (in SPARQL only)**"""

query = """
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?livingThing ?age
WHERE {
    ?livingThing rdf:type ?type .
    ?type rdfs:subClassOf* <http://somewhere#LivingThing> .
    ?livingThing foaf:age ?age .
}
ORDER BY DESC(?age)
"""

results = g.query(query)

for r in results:
    print(r.livingThing,r.age)